AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Application to manage Linkin Park Concert dates

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: dotnet8
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'POST, GET'"
      AllowOrigin: "'*'"
      #MaxAge: "'600'"


Parameters:
  CallbackUrl:
    Type: String
    
Resources:
  # Database
  ConcertsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Concerts
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        #- AttributeName: PostedStartTime
        #  AttributeType: S
        #- AttributeName: Country
        #  AttributeType: S
        #- AttributeName: State
        #  AttributeType: S
        #- AttributeName: City
        #  AttributeType: S
        #- AttributeName: Venue
        #  AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  
  # Access Roles
  ConcertsWriteLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                Resource: !GetAtt ConcertsDynamoDBTable.Arn
  ConcertsReadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DescribeTable
                  - dynamodb:Scan
                Resource: !GetAtt ConcertsDynamoDBTable.Arn
  
  CognitoAuthorizerUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cognito-user-pool-userpool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: email
          #Required: true
        - AttributeDataType: String
          Mutable: true
          Name: first_name
          #Required: true
        - AttributeDataType: String
          Mutable: true
          Name: last_name
          #Required: true
  
  CognitoAuthorizerUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - !Ref CallbackUrl
      ClientName: cognito-user-pool-client
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref CognitoAuthorizerUserPool
      GenerateSecret: true
  
  CognitoAuthorizerUserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: LpConcertsAuthServer
      Name: LpConcertsAuthServer
      Scopes:
        - ScopeDescription: "Allow access to application"
          ScopeName: user_access
      UserPoolId: !Ref CognitoAuthorizerUserPool
  
  CognitoAuthorizerUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-${AWS::AccountId}
      UserPoolId: !Ref CognitoAuthorizerUserPool
  
  # REST API that is secured by cognito
  ConcertsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: ConcertsCognitoAuthorizer
        Authorizers:
          ConcertsCognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoAuthorizerUserPool.Arn
  
  # Lambda functions
  AddConcertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.AddConcert::Lambda.AddConcert.Function::FunctionHandler
      Role: !GetAtt ConcertsWriteLambdaExecutionRole.Arn
      Description: .NET function to add calendar entries
      CodeUri: ./Lambda.AddConcert/src/Lambda.AddConcert/bin/Release/net8.0/Lambda.AddConcert.zip
      Architectures:
        - arm64
      Tracing: Active
      Events:
        PutAddConcert:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /addConcert
            Method: put
            
  FindConcertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.ListConcerts::Lambda.ListConcerts.Function::FunctionHandler
      Role: !GetAtt ConcertsReadLambdaExecutionRole.Arn
      Description: .NET function to read calendar entries
      CodeUri: ./Lambda.ListConcerts/src/Lambda.ListConcerts/bin/Release/net8.0/Lambda.ListConcerts.zip
      Architectures:
        - arm64
      Tracing: Active
      Events:
        ListConcerts:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /concerts
            Method: get

Outputs:
  HostedUi:
    Description: Hosted UI
    Value: !Sub "https://${CognitoAuthorizerUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${CognitoAuthorizerUserPoolClient}&response_type=token&scope=email+openid+profile&redirect_uri=${CallbackUrl}"

  UserPoolId:
    Description: "UserPool ID"
    Value: !Ref CognitoAuthorizerUserPool
    Export:
      Name: 'UserPoolId'

  UserPoolClientId:
    Description: "UserPoolClient ID"
    Value: !Ref CognitoAuthorizerUserPoolClient
    Export:
      Name: 'UserPoolClientId'

  #UserPoolClientIdSecret:
  #  Value:
  #    !GetAtt CognitoAuthorizerUserPoolClient.ClientSecret
  
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  #GetCalendar:
  #  Description: "Function to read the calendar"
  #  Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getCalendar/"
  #AddConcertFunction:
  #  Description: "Hello World Lambda Function ARN"
  #  Value: !GetAtt AddConcertFunction.Arn
  #AddConcertFunctionRole:
  #  Description: "Implicit IAM Role created for Hello World function"
  #  Value: !GetAtt AddConcertFunctionRole.Arn
