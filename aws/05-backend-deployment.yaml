AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Application to manage the backend resources for the LP Calendar project



Parameters:
  BaseProductName:
    Description: Name of the product. Is used as prefix in the exports
    Type: String
  RootDomain:
    Type: String
  CallbackUrl:
    Type: String
  UserPoolId:
    Type: String
  HostedZoneId:
    Type: String
  GatewaySslCertificateArn:
    Type: String
    Description: ARN of the SSL Certificate. The certificate must be hosted in us-eat-1, which is why we have to pass it as parameter
  CognitoSslCertificateArn:
    Type: String
    Description: ARN of the SSL Certificate for Cognito. The certificate must be hosted in us-eat-1, which is why we have to pass it as parameter
  TimeZoneApiKey:
    Type: String
    Description: Key for the TimezoneDB API


Globals:
  Function:
    Timeout: 15
    MemorySize: 256
    Runtime: dotnet8
    Tags:
      ProductName: "lpcalendar"
      Stage: !Ref BaseProductName
      Category: "compute"
    Environment:
      Variables:
        AUDIT_LOG_QUEUE_URL: !Ref AuditLogQueue
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'POST, GET, PUT, DELETE'"
      AllowOrigin: "'*'"
      AllowHeaders: "'*'"
      #MaxAge: "'600'"


Resources:
  # Database
  ConcertsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}_ConcertsV2
      Tags:
        - Key: "ProductName"
          Value: "lpcalendar"
        - Key: "Stage"
          Value: !Ref BaseProductName
        - Key: "Category"
          Value: "storage"
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: PostedStartTime
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        #- AttributeName: Country
        #  AttributeType: S
        #- AttributeName: State
        #  AttributeType: S
        #- AttributeName: City
        #  AttributeType: S
        #- AttributeName: Venue
        #  AttributeType: S
        #- AttributeName: ScheduleImageFile
        #  AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PostedStartTimeGlobalIndex
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
            - AttributeName: PostedStartTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      StreamSpecification: # stream for DB events
        StreamViewType: NEW_AND_OLD_IMAGES
      
  AuditLogDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}_AuditLogV1
      Tags:
        - Key: "ProductName"
          Value: "lpcalendar"
        - Key: "Stage"
          Value: !Ref BaseProductName
        - Key: "Category"
          Value: "storage"
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
        - AttributeName: Entity
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: UserHistoryIndex
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: EntityHistoryIndex
          KeySchema:
            - AttributeName: Entity
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      
  
  # Policy to publish to AuditLogQueue
  AuditLogQueueProducerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt AuditLogQueue.Arn

  # Access Roles
  ConcertsWriteLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Execution role for Lambda that writes to the DB"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref AuditLogQueueProducerPolicy
      Policies:
        - PolicyName: S3ImporterBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub "arn:aws:s3:::${BaseProductName}-concert-import-data*"
        - PolicyName: S3ConcertImgBucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${BaseProductName}-concert-images"
                  - !Sub "arn:aws:s3:::${BaseProductName}-concert-images/*"
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Sub "${ConcertsDynamoDBTable.Arn}"
                  - !Sub "${ConcertsDynamoDBTable.Arn}*"
  ConcertsReadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Execution role for Lambda that reads from the DB"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DescribeTable
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !Sub "${ConcertsDynamoDBTable.Arn}*"
  
  UsersReadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Execution role for Lambda that reads from the Cognito User List"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref AuditLogQueueProducerPolicy
      Policies:
        - PolicyName: LambdaCognitoReadAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                Resource: !Sub "${CognitoAuthorizerUserPoolV3.Arn}*"
        - PolicyName: LambdaCognitoWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminListGroupsForUser
                Resource: !Sub "${CognitoAuthorizerUserPoolV3.Arn}*"
  
  AuditLogWriteLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Execution role for Lambda that writes to the audit log DB"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaSQSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !Sub "${AuditLogQueue.Arn}"
                  - !Sub "${AuditLogQueue.Arn}*"
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Sub "${AuditLogDynamoDBTable.Arn}"
                  - !Sub "${AuditLogDynamoDBTable.Arn}*"
        - PolicyName: LambdaDynamoDBConcertStreamsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource:
                  - !Sub "${ConcertsDynamoDBTable.Arn}"
                  - !Sub "${ConcertsDynamoDBTable.Arn}*"

  CognitoAuthorizerUserPoolV3:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${UserPoolId}
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
        SignInPolicy:
          AllowedFirstAuthFactors:
            - WEB_AUTHN # passkeys
            - PASSWORD
      # the domain here must be built like CognitoAuthorizerUserPoolDomain!
      WebAuthnRelyingPartyID: !Sub "auth.${RootDomain}"
      WebAuthnUserVerification: required
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: email
          #Required: true
        - AttributeDataType: String
          Mutable: true
          Name: display_name
          #Required: true        

  CognitoAuthorizerUserPoolV3ResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: !Sub ${AWS::StackName}_LpConcertsAuthServer
      Name: !Sub ${AWS::StackName}_LpConcertsAuthServer
      Scopes:
        - ScopeDescription: "Allow access to application"
          ScopeName: user_access
      UserPoolId: !Ref CognitoAuthorizerUserPoolV3

  CognitoAuthorizerUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoAuthorizerUserPoolV3ResourceServer
    Properties:
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - !Sub ${AWS::StackName}_LpConcertsAuthServer/user_access
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_AUTH
        - ALLOW_USER_SRP_AUTH
      CallbackURLs:
        - !Ref CallbackUrl
        - !Sub ${CallbackUrl}/
        - http://localhost:4200
        - http://localhost:4200/
        - http://localhost:4200/home
      LogoutURLs:
        - !Ref CallbackUrl
        - !Sub ${CallbackUrl}/
        - http://localhost:4200
        - http://localhost:4200/
        - http://localhost:4200/home
      ClientName: !Sub ${UserPoolId}-client
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref CognitoAuthorizerUserPoolV3
      GenerateSecret: false

  CognitoAuthorizerUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "auth.${RootDomain}"
      ManagedLoginVersion: 2
      UserPoolId: !Ref CognitoAuthorizerUserPoolV3
      CustomDomainConfig:
        CertificateArn: !Ref CognitoSslCertificateArn
  
  CognitoManagedLoginBranding:
    Type: AWS::Cognito::ManagedLoginBranding
    Properties:
      ClientId: !Ref CognitoAuthorizerUserPoolClient
      ReturnMergedResources: true
      UseCognitoProvidedValues: false
      UserPoolId: !Ref CognitoAuthorizerUserPoolV3
      Settings:
        categories:
          global:
            colorSchemeMode: DYNAMIC
  
  # Cognito User Groups
  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Admins
      GroupName: Admin
      Precedence: 1
      UserPoolId: !Ref CognitoAuthorizerUserPoolV3
  
  ManageUsersUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: People in this group can manage users
      GroupName: ManageUsers
      Precedence: 2
      UserPoolId: !Ref CognitoAuthorizerUserPoolV3
  
  AddConcertsUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: People in this group can add concerts
      GroupName: AddConcerts
      Precedence: 3
      UserPoolId: !Ref CognitoAuthorizerUserPoolV3
  
  UpdateConcertsUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: People in this group can update concerts
      GroupName: UpdateConcerts
      Precedence: 4
      UserPoolId: !Ref CognitoAuthorizerUserPoolV3
  
  DeleteConcertsUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: People in this group can DELETE concerts
      GroupName: DeleteConcerts
      Precedence: 3
      UserPoolId: !Ref CognitoAuthorizerUserPoolV3

  # REST API that is secured by cognito
  ConcertsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST, GET, PUT, DELETE'"
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
      Auth:
        Authorizers:
          ConcertsCognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoAuthorizerUserPoolV3.Arn
            IdentitySource: method.request.header.Authorization
            Scopes:
              - !Sub ${AWS::StackName}_LpConcertsAuthServer/user_access
  
  #ConcertsApiDomainName:
  #  Type: AWS::ApiGateway::DomainName
  #  DependsOn: ConcertsApi
  #  Properties:
  #    DomainName: !Sub api-gateway.${RootDomain}
  #    CertificateArn: !Ref GatewaySslCertificateArn

  #oncertsApiBasePathMapping:
  #  Type: AWS::ApiGateway::BasePathMapping
  #  Properties:
  #    DomainName: !Ref ConcertsApiDomainName
  #    RestApiId: !Ref ConcertsApi
  #    BasePath: ''
  
  ConcertImportBucket:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - ImportConcertsFunction
      - ConcertImportBucketLambdaPermission
    Properties:
      BucketName: !Sub ${BaseProductName}-concert-import-data
      Tags:
        - Key: "ProductName"
          Value: "lpcalendar"
        - Key: "Stage"
          Value: !Ref BaseProductName
        - Key: "Category"
          Value: "storage"
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt ImportConcertsFunction.Arn
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: csv
  
  # Bucket to store the images
  ConcertImagesBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${BaseProductName}-concert-images
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            Id: concertImgCorsRuleGet
            MaxAge: 3600
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
              - POST
            AllowedOrigins:
              - '*'
            Id: concertImgCorsRulePut
            MaxAge: 3600
      Tags:
        - Key: "ProductName"
          Value: "lpcalendar"
        - Key: "Stage"
          Value: !Ref BaseProductName
        - Key: "Category"
          Value: "storage"
  
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: !Sub ${AWS::StackName}_PublicS3ConcertImgPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ConcertImagesBucket
                - /*
      Bucket: !Ref ConcertImagesBucket
      
  
  # Event queues
  AuditLogQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-audit-log-event-queue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
  
  # Audit log lambda
  AuditLogWriterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.AuditLogWriter::Lambda.AuditLogWriter.Function::HandleSQSMessages
      Role: !GetAtt AuditLogWriteLambdaExecutionRole.Arn
      Description: .NET function to save the audit log events
      CodeUri: ../Lambda.AuditLogWriter/src/Lambda.AuditLogWriter/bin/Release/net8.0/Lambda.AuditLogWriter.zip
      Architectures:
        - arm64
      Tracing: Active
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: DEBUG
      Environment:
        Variables:
          AUDIT_LOG_TABLE_NAME: !Ref AuditLogDynamoDBTable
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt AuditLogQueue.Arn
            BatchSize: 5
#  AuditLogConcertsDynamoDbWriterFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: Lambda.AuditLogWriter::Lambda.AuditLogWriter.Function::HandleConcertsDynamoDBEvent
#      Role: !GetAtt AuditLogWriteLambdaExecutionRole.Arn
#      Description: .NET function to save the audit log events from DynamoDBStream
#      CodeUri: ../Lambda.AuditLogWriter/src/Lambda.AuditLogWriter/bin/Release/net8.0/Lambda.AuditLogWriter.zip
#      Architectures:
#        - arm64
#      Tracing: Active
#      LoggingConfig:
#        LogFormat: JSON
#        ApplicationLogLevel: DEBUG
#      Environment:
#        Variables:
#          AUDIT_LOG_TABLE_NAME: !Ref AuditLogDynamoDBTable
#      Events:
#        DynamoStream:
#          Type: DynamoDB
#          Properties:
#            Stream: !GetAtt ConcertsDynamoDBTable.StreamArn
#            StartingPosition: TRIM_HORIZON  # or LATEST
#            BatchSize: 100
  
  # Other Lambda functions
  AddConcertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.AddConcert::Lambda.AddConcert.Function::FunctionHandler
      Role: !GetAtt ConcertsWriteLambdaExecutionRole.Arn
      Description: .NET function to add Concerts to the calendar
      CodeUri: ../Lambda.AddConcert/src/Lambda.AddConcert/bin/Release/net8.0/Lambda.AddConcert.zip
      Architectures:
        - arm64
      Tracing: Active
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: DEBUG
      Environment:
        Variables:
          CONCERTS_TABLE_NAME: !Ref ConcertsDynamoDBTable
      Events:
        PutAddConcert:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /addConcert
            Method: put
            Auth:
              Authorizer: ConcertsCognitoAuthorizer
              AuthorizationScopes:
                - openid
                #- !Sub ${AWS::StackName}_LpConcertsAuthServer/user_access
  
  ImportConcertsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.ImportConcerts::Lambda.ImportConcerts.Function::FunctionHandler
      Role: !GetAtt ConcertsWriteLambdaExecutionRole.Arn
      Description: .NET function to import Concerts as CSV from DynamoDB
      CodeUri: ../Lambda.ImportConcerts/src/Lambda.ImportConcerts/bin/Release/net8.0/Lambda.ImportConcerts.zip
      Architectures:
        - arm64
      Tracing: Active
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: DEBUG
      Environment:
        Variables:
          CONCERTS_TABLE_NAME: !Ref ConcertsDynamoDBTable
  
  ConcertImportBucketLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt ImportConcertsFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceArn: !Sub arn:aws:s3:::${BaseProductName}-concert-import-data
  
  GetS3UploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.GetS3UploadUrl::Lambda.GetS3UploadUrl.Function::FunctionHandler
      Role: !GetAtt ConcertsWriteLambdaExecutionRole.Arn
      Description: .NET function to request an URL to upload files to S3
      CodeUri: ../Lambda.GetS3UploadUrl/src/Lambda.GetS3UploadUrl/bin/Release/net8.0/Lambda.GetS3UploadUrl.zip
      Architectures:
        - arm64
      Tracing: Active
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: DEBUG
      Environment:
        Variables:
          CONCERTS_TABLE_NAME: !Ref ConcertsDynamoDBTable
          CONCERT_IMG_BUCKET_NAME: !Ref ConcertImagesBucket
      Events:
        PutAddConcert:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /requestFileUpload
            Method: put
            Auth:
              Authorizer: ConcertsCognitoAuthorizer
              AuthorizationScopes:
                - openid
                #- !Sub ${AWS::StackName}_LpConcertsAuthServer/user_access
  
  DeleteConcertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.DeleteConcert::Lambda.DeleteConcert.Function::FunctionHandler
      Role: !GetAtt ConcertsWriteLambdaExecutionRole.Arn
      Description: .NET function to remove Concerts from calendar
      CodeUri: ../Lambda.DeleteConcert/src/Lambda.DeleteConcert/bin/Release/net8.0/Lambda.DeleteConcert.zip
      Architectures:
        - arm64
      Tracing: Active
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: DEBUG
      Environment:
        Variables:
          CONCERTS_TABLE_NAME: !Ref ConcertsDynamoDBTable
      Events:
        PutAddConcert:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /deleteConcert/{concertId}
            Method: delete
            Auth:
              Authorizer: ConcertsCognitoAuthorizer
              AuthorizationScopes:
                - openid
                #- !Sub ${AWS::StackName}_LpConcertsAuthServer/user_access
  
  FindConcertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.ListConcerts::Lambda.ListConcerts.Function::FunctionHandler
      Role: !GetAtt ConcertsReadLambdaExecutionRole.Arn
      Description: .NET function to read Concert entries
      CodeUri: ../Lambda.ListConcerts/src/Lambda.ListConcerts/bin/Release/net8.0/Lambda.ListConcerts.zip
      Architectures:
        - arm64
      Tracing: Active
      MemorySize: 384
      Environment:
        Variables:
          CONCERTS_TABLE_NAME: !Ref ConcertsDynamoDBTable
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: DEBUG
      Events:
        GetSingleConcert:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /concerts/{id}
            Method: get
        ListConcerts:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /concerts
            Method: get
        NextConcert:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /concerts/next
            Method: get
  
  AdjacentConcertsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.AdjacentConcerts::Lambda.AdjacentConcerts.Function::FunctionHandler
      Role: !GetAtt ConcertsReadLambdaExecutionRole.Arn
      Description: .NET function to read the next and/or previous Concert IDs
      CodeUri: ../Lambda.AdjacentConcerts/src/Lambda.AdjacentConcerts/bin/Release/net8.0/Lambda.AdjacentConcerts.zip
      Architectures:
        - arm64
      Tracing: Active
      MemorySize: 384
      Environment:
        Variables:
          CONCERTS_TABLE_NAME: !Ref ConcertsDynamoDBTable
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: DEBUG
      Events:
        GetAdjacentConcerts:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /concerts/{id}/adjacent
            Method: get
  
  
  UsersReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.UsersRead::Lambda.UsersRead.Function::FunctionHandler
      Role: !GetAtt UsersReadLambdaExecutionRole.Arn
      Description: .NET function to read user-data from Cognito
      CodeUri: ../Lambda.UsersRead/src/Lambda.UsersRead/bin/Release/net8.0/Lambda.UsersRead.zip
      Architectures:
        - arm64
      Tracing: Active
      MemorySize: 384
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoAuthorizerUserPoolV3
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: DEBUG
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /users
            Method: get
            Auth:
              Authorizer: ConcertsCognitoAuthorizer
              AuthorizationScopes:
                - openid
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /users/{id}
            Method: get
            Auth:
              Authorizer: ConcertsCognitoAuthorizer
              AuthorizationScopes:
                - openid
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /users/{id}
            Method: put
            Auth:
              Authorizer: ConcertsCognitoAuthorizer
              AuthorizationScopes:
                - openid
  
  
  GetTimeZoneFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.GetTimeZone::Lambda.GetTimeZone.Function::FunctionHandler
      Role: !GetAtt ConcertsReadLambdaExecutionRole.Arn
      Description: .NET function to search for the timezone at a given location
      CodeUri: ../Lambda.GetTimeZone/src/Lambda.GetTimeZone/bin/Release/net8.0/Lambda.GetTimeZone.zip
      Architectures:
        - arm64
      Tracing: Active
      MemorySize: 384
      Environment:
        Variables:
          TZDB_API_KEY: !Ref TimeZoneApiKey
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: DEBUG
      Events:
        GetTimeZone:
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /timeZone/byCoordinates
            Method: get

  
  
  ConcertCalendarFeedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda.CalendarFeed::Lambda.CalendarFeed.Function::FunctionHandler
      Role: !GetAtt ConcertsReadLambdaExecutionRole.Arn
      Description: .NET function to convert calendar entries to the iCal format as a feed
      CodeUri: ../Lambda.CalendarFeed/src/Lambda.CalendarFeed/bin/Release/net8.0/Lambda.CalendarFeed.zip
      Architectures:
        - arm64
      Tracing: Active
      Environment:
        Variables:
          CONCERTS_TABLE_NAME: !Ref ConcertsDynamoDBTable
      Events:
        ListConcerts: # TODO: maybe rename?
          Type: Api
          Properties:
            RestApiId: !Ref ConcertsApi
            Path: /feed/ical
            Method: get


Outputs:
  ConcertsApiGatewayExport:
    Description: 'Id of the API Gateway'
    Value: !Ref ConcertsApi
    Export:
      Name: !Sub '${BaseProductName}-main-api-gateway'
  ConcertsApiGatewayDomainExport:
    Description: Domain of API Gateway
    Value: !Sub "${ConcertsApi}.execute-api.${AWS::Region}.amazonaws.com"
    #Value: !Sub api-gateway.${RootDomain}.
    Export:
      Name: !Sub '${BaseProductName}-main-api-gateway-domain'
  ConcertImgBucketExport:
    Description: 'Bucket that stores concert related images'
    Value: !GetAtt ConcertImagesBucket.RegionalDomainName
    Export:
      Name: !Sub '${BaseProductName}-concert-image-s3-regional-domain'
  CognitoUerPoolDomainExport:
    Description: 'Internal domain name of the Cognito userpool'
    Value: !Sub "${BaseProductName}-${AWS::AccountId}.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: !Sub '${BaseProductName}-cognito-domain'
