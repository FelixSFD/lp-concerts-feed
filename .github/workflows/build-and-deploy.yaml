# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Deploy to AWS

on:
  push:
    branches: [ "develop" ]
  workflow_dispatch:
    inputs:
      base_name:
        description: 'Prefix for the resources'
        required: true
        default: 'lpshows-test'
      root_domain:
        description: 'Base domain for the application'
        required: true
        default: 'test.lpshows.live'
      user_pool_id:
        description: 'ID of the cognito user pool to create'
        required: true
        default: 'lpshows-test-userpool'
      hosted_zone_id:
        description: 'ID of the hosted zone for root_domain'
        required: true
        default: 'Z01703772XJ8G8PR8WY7G'
      certificate_arn:
        description: 'ARN of the SSL certificate to use'
        required: true
        default: 'arn:aws:acm:us-east-1:183771145359:certificate/fb039074-05e0-40bc-8203-7bc3a3829f71'

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install Lambda tools
      run: dotnet tool install -g Amazon.Lambda.Tools
    - name: Restore dependencies
      run: dotnet restore

    - name: Build Lambda.AddConcert
      working-directory: Lambda.AddConcert/src/Lambda.AddConcert
      run: dotnet lambda package -farch arm64
    - name: Build Lambda.ListConcerts
      working-directory: Lambda.ListConcerts/src/Lambda.ListConcerts
      run: dotnet lambda package -farch arm64
    - name: Build Lambda.DeleteConcert
      working-directory: Lambda.DeleteConcert/src/Lambda.DeleteConcert
      run: dotnet lambda package -farch arm64
    - name: Build Lambda.CalendarFeed
      working-directory: Lambda.CalendarFeed/src/Lambda.CalendarFeed
      run: dotnet lambda package -farch arm64

    # AWS DEPLOY
    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - run: sam build -t 05-backend-deployment.yaml
      working-directory: aws
    - run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name ${{ github.event.inputs.base_name }}-backend --region eu-central-1 --capabilities CAPABILITY_IAM --parameter-overrides CallbackUrl=https://${{ github.event.inputs.root_domain }} UserPoolId=${{ github.event.inputs.user_pool_id }} RootDomain=${{ github.event.inputs.root_domain }} HostedZoneId=${{ github.event.inputs.hosted_zone_id }} CertificateArn=${{ github.event.inputs.certificate_arn }}
      working-directory: aws

  frontend:
    needs: [backend]
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23.6.x'

    - name: Install dependencies
      working-directory: frontend/lp-calendar-web
      run: npm ci # Use npm ci for faster installs and CI consistency
    - name: Build Angular project
      working-directory: frontend/lp-calendar-web
      run: npm run build -- --configuration production

    - name: Deploy
      if: success()
      working-directory: frontend/lp-calendar-web
      run: aws s3 sync ./dist/lp-calendar-web/browser s3://${{ github.event.inputs.base_name }}-web-frontend-bucket
